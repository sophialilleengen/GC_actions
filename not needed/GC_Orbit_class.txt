import numpy as np
from scipy import interpolate
from scipy import integrate as intg
from scipy import optimize as opt


class GCorbit:
	def __init__(self,R,rho,bhmass): #filename of object containing interpolation of density profile
		self.r=R
		self.rho=rho
		self.s=interpolate.InterpolatedUnivariateSpline(np.log(self.r[:]),np.log(self.rho[:]))
		pot_y=self.potential(r,density,low=0.003,high=104.64,x_i=None,w_i=None,full_integration=True)
		self.pot=interpolate.InterpolatedUnivariateSpline(self.r,pot_y)

	def potential(self,r,density,low=0.003,high=104.64,x_i=None,w_i=None,full_integration=False):
		if True:
				sum1=np.zeros(n)
   				sum2=np.zeros(n)
				if isinstance(r,np.ndarray):
        				return np.array([potential(rr,density,low=low,high=high,x_i=x_i,w_i=w_i) for rr in r])
    				else:
        				if r<low or r>high:
            					sys.exit("r is smaller or bigger than star boundaries")
        				x1=((r-low)/2)*x_i+(r+low)/2
        				x2=((high-r)/2)*x_i+(high+r)/2
        				for i in range(n):
            					s1=density(x1[i])
            					s2=density(x2[i])
            					sum1[i]=(w_i[i]*x1[i]**2*s1)
            					sum2[i]=(w_i[i]*x2[i]*s2)
        				sum_1=np.sum(sum1)
        				sum_2=np.sum(sum2)
        				return -4*np.pi*G*((r-low)/(2*r)*sum_1+(high-r)/2*sum_2)
		else:
			return self.pot(r,density,low=0.003,high=104.64,x_i=None,w_i=None)
    
	def potential_bh(self,r,bhmass):
		return -G*bhmass/r

#addiere sternen- und bh-potential vor interpolation?

	def r_derivative(self,potential):
		return self.potential.derivative

	def force(self,x,y,z,potential):
		force=np.array(3)
		r=np.sqrt(x**2+y**2+z**2)
		drdx=x/r
		drdy=y/r
		drdz=z/r
		force[0]=self.r_derivative(potential)*drdx
		force[1]=self.r_derivative(potential)*drdy
		force[2]=self.r_derivative(potential)*drdz
		return force
		

	def orbit(self,x0,y0,z0,vx0,vy0,vz0,N): #noch von force abhängig machen?
		xl=np.zeros(N+1)
		yl=np.zeros(N+1)
		zl=np.zeros(N+1)

		x_l=np.sqrt(xl**2+yl**2+zl**2)

		vxl=np.zeros(N+1)
		vyl=np.zeros(N+1)
		vzl=np.zeros(N+1)

		xl[0]=x0
		yl[0]=y0
		zl[0]=z0

		vxl[0]=vx0
		vyl[0]=vy0
		vzl[0]=vz0

		for i in range(N):
		    	xl[0]=x0
    			yl[0]=y0
			zl[0]=z0
    
    			a=self.force(xl[i],yl[i],zl[i]) #hier auch noch potential rein?
    
    			xl[i+1]=xl[i]+vxl[i]*dt+1./2.*a[0]*dt**2
    			yl[i+1]=yl[i]+vyl[i]*dt+1./2.*a[1]*dt**2
    			zl[i+1]=zl[i]+vzl[i]*dt+1./2.*a[2]*dt**2
    
    			a_1=self.force(xl[i+1],yl[i+1],zl[i+1]) #und hier auch potential?
    
    			vxl[i+1]=vxl[i]+1./2.*(a[0]+a_1[0])*dt
    			vyl[i+1]=vyl[i]+1./2.*(a[1]+a_1[1])*dt
   			vzl[i+1]=vzl[i]+1./2.*(a[2]+a_1[2])*dt
		
		return xl,yl,zl,vxl,vyl,vzl


##### Versuch 1 zu actions #####

	def angularmom(self,x,y,z,vx,vy,vz):
    		Lx=y*vz-z*vy
    		Ly=z*vx-x*vz
    		Lz=x*vy-y*vx
    		L=np.sqrt(Lx**2+Ly**2+Lz**2)
    		return L,Lx,Ly,Lz


	def energy(self,x,y,z,vx,vy,vz):
    		pot=self.potential(x,y,z)		#eventuell weitere Parameter im Potential
    		E=vx**2./2.+vy**2./2.+vz**2./2.+pot
    		return E

	def periapocenter(self,r_ap,x,y,z,vx,vy,vz):
	    	r=np.sqrt(x**2+y**2+z**2)
    		pot=self.potential(x,y,z)		#eventuell weitere Parameter im Potential
		E=self.energy(x,y,z,vx,vy,vz)
		L=elf.angularmom(x,y,z,vx,vy,vz)[0]
    		return (1/r_ap)**2.+2.*(self.potential(r_ap)-E)/L**2. 	#Potential im Apo- bzw Pericenter noch richtige Argumente/Parameter einsetzen
	

	rmin=opt.fsolve(periapocenter,np.min(r)) #nicht min(rl) sondern einfach kleiner Wert weil ich es erst durch orbit integration weiss
	rmax=opt.fsolve(periapocenter,np.max(r))

	def j_rint(self,x,y,z,vx,vy,vz):
    		r=np.sqrt(x**2+y**2+z**2)
    		pot=self.potential(x,y,z)
    		E=self.energy(x,y,z,vx,vy,vz)
    		L=self.angularmom(x,y,z,vx,vy,vz)[0]
    		return np.sqrt(2.*E-2.*pot-L**2./r**2.)

	def J_phi(self,x,y,z,vx,vy,vz):
    		Lz=self.angularmom(x,y,z,vx,vy,vz)[3]
    		J_phi=Lz
    		return J_phi
    
	def J_theta(self,x,y,z,vx,vy,vz):
    		L=self.angularmom(x,y,z,vx,vy,vz)[0]
    		Lz=self.angularmom(x,y,z,vx,vy,vz)[1]
    		J_theta=L-np.abs(Lz)
    		return J_theta

### J_r beim Integral unsicher wegen Argumenten für j_rint und wegen Apo- und Pericenter ###

	def J_r(self,x,y,z,vx,vy,vz):

	### Peri- und Apocenter Suche noch verbessern, nicht min(rl)/max(rl) sondern irgendwie kleine bzw große Werte finden abhaengig von r ###
		rmin=opt.fsolve(periapocenter,np.min(r)) #nicht min(rl) sondern einfach kleiner Wert weil ich es erst durch orbit integration weiss
		rmax=opt.fsolve(periapocenter,np.max(r))

    		J_r=1/np.pi*intg.quad(j_rint,rmin,rmax)[0] 
    		return J_r
	
	def actions(self,x,y,z,vx,vy,vz):
		J_phi=self.J_phi(x,y,z,vx,vy,vz)
		J_theta=self.J_theta(x,y,z,vx,vy,vz)
		J_r=self.J_r(x,y,z,vx,vy,vz)
		return J_phi,J_theta,J_r



##### Versuch 2 zu actions, tendiere zu Versuch 1, das hier ist fast ursprünglicher Code von mir ######

	def actions(self,xl,yl,zl,vxl,vyl,vzl): #hier auch potential in die klammer?
		actions=np.array(3)

		rl=np.sqrt(xl**2+yl**2+zl**2)

		#angular moments without mass
		Lx=yl*vzl-zl*vyl
		Ly=zl*vxl-xl*vzl
		Lz=xl*vyl-yl*vxl

		L=np.sqrt(Lx**2+Ly**2+Lz**2)

		phipot=potential(rl)

		E=vxl**2./2.+vyl**2./2.+vzl**2./2.+phipot

		def periapocenter(self,r):
    			pot=potential(r)
    			return (1/r)**2.+2.*(pot-E[0])/L[0]**2.

		rmin=opt.fsolve(periapocenter,np.min(rl)) #nicht min(rl) sondern einfach kleienr wert weil ich es erst durch orbit integration weiss
		rmax=opt.fsolve(periapocenter,np.max(rl))

		def jrint(self,r,E,L):
		    	pot=potential(r)
		    	return np.sqrt(2.*E-2.*pot-L**2./r**2.)

		J_phi=Lz
		J_theta=L-np.abs(Lz)

		J_r=np.zeros(len(J_phi))
		for i in range(len(J_r)):
    			J_r[i]=1/np.pi*intg.quad(jrint,rmin,rmax)[0]

		#J_ri=cs.G*mges/np.sqrt(-2.*E)-1./2.*(L+np.sqrt(L**2.-4.*cs.G*mges*b))
		
		
		actions[0]=J_phi
		actions[1]=J_theta
		actions[2]=J_r

		return actions


			
